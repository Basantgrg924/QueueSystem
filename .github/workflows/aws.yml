name: CI/CD Pipeline - Deploy to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

env:
  NODE_VERSION: '18'

jobs:
  frontend-tests:
    name: "Frontend Tests & Linting"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
      continue-on-error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/coverage/
          frontend/test-results/
      continue-on-error: true

  backend-tests:
    name: "Backend Tests & Linting"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm test
      continue-on-error: true
      env:
        MONGODB_URI: mongodb://root:password@localhost:27017/test?authSource=admin
        NODE_ENV: test
        JWT_SECRET: test-secret

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/coverage/
          backend/test-results/
      continue-on-error: true

  build-applications:
    name: "Build & Package Applications"
    needs: [frontend-tests, backend-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js for Frontend Build
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Build Frontend Application
      run: |
        cd frontend
        npm ci
        REACT_APP_BACKEND_URL=http://${{ secrets.EC2_HOST }}:5001 npm run build
        tar -czf ../frontend-build.tar.gz -C build .
    
    - name: Setup Node.js for Backend Build
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Package Backend Application
      run: |
        cd backend
        npm ci --production
        tar --exclude='node_modules/.cache' --exclude='*.log' --exclude='.env' \
            -czf ../backend-app.tar.gz .
    
    - name: Upload Frontend Build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend-build.tar.gz
        retention-days: 1
    
    - name: Upload Backend Package
      uses: actions/upload-artifact@v4
      with:
        name: backend-package
        path: backend-app.tar.gz
        retention-days: 1

  deploy-to-ec2:
    name: "Deploy to Production"
    needs: build-applications
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Download Frontend Build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
    
    - name: Download Backend Package
      uses: actions/download-artifact@v4
      with:
        name: backend-package
    
    - name: Prepare EC2 Environment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          mkdir -p ~/app/{frontend,backend,logs}
          
          if ! command -v node &> /dev/null; then
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          if ! command -v pm2 &> /dev/null; then
            sudo npm install -g pm2
          fi
          
          if ! command -v nginx &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y nginx
            sudo systemctl enable nginx
          fi
          
          sudo systemctl start mongod
          sudo systemctl enable mongod
          timeout 30 bash -c 'until mongosh --eval "db.adminCommand({ping: 1})" >/dev/null 2>&1; do sleep 2; done'
          
          cat > ~/app/backend/.env << EOF
          NODE_ENV=production
          PORT=5001
          MONGO_URI=mongodb://127.0.0.1:27017/sdlapps
          MONGODB_URI=mongodb://127.0.0.1:27017/sdlapps
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          FRONTEND_URL=http://${{ secrets.EC2_HOST }}
          DEFAULT_ADMIN_EMAIL=${{ secrets.DEFAULT_ADMIN_EMAIL }}
          DEFAULT_ADMIN_PASSWORD=${{ secrets.DEFAULT_ADMIN_PASSWORD }}
          DEFAULT_ADMIN_NAME=${{ secrets.DEFAULT_ADMIN_NAME }}
          EOF
          
          cat > ~/app/ecosystem.config.js << 'EOF'
          module.exports = {
            apps: [{
              name: 'backend-api',
              cwd: './backend',
              script: 'server.js',
              env: { NODE_ENV: 'production' },
              instances: 1,
              autorestart: true,
              watch: false,
              max_memory_restart: '1G',
              error_file: './logs/backend-error.log',
              out_file: './logs/backend-out.log',
              log_file: './logs/backend-combined.log',
              time: true
            }]
          };
          EOF
          
          sudo tee /etc/nginx/sites-available/sdlapp << 'EOF'
          server {
              listen 80;
              server_name _;
              root /home/$USER/app/frontend;
              index index.html;
              
              location / {
                  try_files $uri $uri/ /index.html;
              }
              
              location /api/ {
                  proxy_pass http://localhost:5001;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
              
              location /health {
                  access_log off;
                  return 200 "healthy\n";
                  add_header Content-Type text/plain;
              }
          }
          EOF
          
          sudo ln -sf /etc/nginx/sites-available/sdlapp /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
    
    - name: Copy Application Files to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: "frontend-build.tar.gz,backend-app.tar.gz"
        target: ~/app/
    
    - name: Deploy Applications to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          cd ~/app
          
          tar -xzf frontend-build.tar.gz -C frontend/
          tar -xzf backend-app.tar.gz -C backend/
          
          pm2 stop ecosystem.config.js 2>/dev/null || true
          pm2 delete all 2>/dev/null || true
          
          cd backend && npm ci --production --silent && cd ..
          
          pm2 start ecosystem.config.js --env production
          sudo systemctl reload nginx
          
          sleep 15
          
          for i in {1..12}; do
            if curl -f http://localhost:5001/api/health >/dev/null 2>&1; then
              break
            fi
            sleep 5
          done
          
          for i in {1..12}; do
            if curl -f http://localhost/health >/dev/null 2>&1; then
              break
            fi
            sleep 5
          done
          
          BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5001/api/health || echo "000")
          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/health || echo "000")
          
          if [ "$BACKEND_STATUS" = "200" ] && [ "$FRONTEND_STATUS" = "200" ]; then
            pm2 save
            pm2 startup systemd -u $USER --hp $HOME
          else
            exit 1
          fi
          
          rm -f frontend-build.tar.gz backend-app.tar.gz
    
    - name: Deployment Summary
      if: always()
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          echo "Deployed: $(date)"
          echo "Frontend: http://${{ secrets.EC2_HOST }}"
          echo "Backend: http://${{ secrets.EC2_HOST }}:5001/api/health"
          pm2 list

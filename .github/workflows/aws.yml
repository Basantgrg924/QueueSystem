name: CI/CD Pipeline - Self-Hosted Runner

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

env:
  NODE_VERSION: '18'

jobs:
  frontend-tests:
    name: "Frontend Tests & Linting"
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
      continue-on-error: true

  backend-tests:
    name: "Backend Tests & Linting"
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Ensure MongoDB is running
      run: |
        sudo systemctl start mongod
        sudo systemctl enable mongod
        timeout 30 bash -c 'until mongosh --eval "db.adminCommand({ping: 1})" >/dev/null 2>&1; do sleep 2; done'
    
    - name: Run tests
      run: npm test
      continue-on-error: true
      env:
        MONGODB_URI: mongodb://localhost:27017/test
        NODE_ENV: test
        JWT_SECRET: test-secret

  build-and-deploy:
    name: "Build & Deploy to Production"
    needs: [frontend-tests, backend-tests]
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Build Frontend
      run: |
        cd frontend
        npm ci
        REACT_APP_BACKEND_URL=http://${{ secrets.EC2_HOST }}:5001 npm run build
    
    - name: Prepare Environment
      run: |
        mkdir -p ~/app/{frontend,backend,logs}
        
        if ! command -v pm2 &> /dev/null; then
          sudo npm install -g pm2
        fi
        
        if ! command -v nginx &> /dev/null; then
          sudo apt-get update -y
          sudo apt-get install -y nginx
          sudo systemctl enable nginx
        fi
        
        sudo systemctl start mongod
        sudo systemctl enable mongod
        timeout 30 bash -c 'until mongosh --eval "db.adminCommand({ping: 1})" >/dev/null 2>&1; do sleep 2; done'
    
    - name: Create Configuration Files
      run: |
        cat > ~/app/backend/.env << EOF
        NODE_ENV=production
        PORT=5001
        MONGO_URI=mongodb://127.0.0.1:27017/sdlapps
        MONGODB_URI=mongodb://127.0.0.1:27017/sdlapps
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        FRONTEND_URL=http://${{ secrets.EC2_HOST }}
        DEFAULT_ADMIN_EMAIL=${{ secrets.DEFAULT_ADMIN_EMAIL }}
        DEFAULT_ADMIN_PASSWORD=${{ secrets.DEFAULT_ADMIN_PASSWORD }}
        DEFAULT_ADMIN_NAME=${{ secrets.DEFAULT_ADMIN_NAME }}
        EOF
        
        cat > ~/app/ecosystem.config.js << 'EOF'
        module.exports = {
          apps: [{
            name: 'backend-api',
            cwd: './backend',
            script: 'server.js',
            env: { NODE_ENV: 'production' },
            instances: 1,
            exec_mode: 'fork',
            autorestart: true,
            watch: false,
            max_memory_restart: '1G',
            error_file: './logs/backend-error.log',
            out_file: './logs/backend-out.log',
            log_file: './logs/backend-combined.log',
            time: true
          }]
        };
        EOF
        
        sudo tee /etc/nginx/sites-available/sdlapp << 'EOF'
        server {
            listen 80;
            server_name _;
            root /home/ubuntu/app/frontend;
            index index.html;
            
            location / {
                try_files $uri $uri/ /index.html;
            }
            
            location /api/ {
                proxy_pass http://localhost:5001;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
            }
            
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
        EOF
        
        sudo ln -sf /etc/nginx/sites-available/sdlapp /etc/nginx/sites-enabled/
        sudo rm -f /etc/nginx/sites-enabled/default
    
    - name: Deploy Applications
      run: |
        # Copy frontend build
        cp -r frontend/build/* ~/app/frontend/
        
        # Copy backend files
        cp -r backend/* ~/app/backend/
        
        # Install backend dependencies
        cd ~/app/backend && npm ci --production --silent && cd -
        
        # Stop existing PM2 processes
        pm2 stop ecosystem.config.js 2>/dev/null || true
        pm2 delete all 2>/dev/null || true
        
        # Kill any process using port 5001
        sudo lsof -ti:5001 | xargs sudo kill -9 2>/dev/null || true
        
        # Start backend with PM2
        cd ~/app
        pm2 start ecosystem.config.js --env production
        
        # Reload nginx
        sudo systemctl reload nginx
        
        # Wait for services
        sleep 15
        
        # Health checks
        for i in {1..12}; do
          if curl -f http://localhost:5001/api/health >/dev/null 2>&1; then
            echo "Backend is healthy!"
            break
          fi
          sleep 5
        done
        
        for i in {1..12}; do
          if curl -f http://localhost/health >/dev/null 2>&1; then
            echo "Frontend is healthy!"
            break
          fi
          sleep 5
        done
        
        # Final verification
        BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5001/api/health || echo "000")
        FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/health || echo "000")
        
        if [ "$BACKEND_STATUS" = "200" ] && [ "$FRONTEND_STATUS" = "200" ]; then
          pm2 save
          echo "Deployment successful!"
          echo "Frontend: http://${{ secrets.EC2_HOST }}"
          echo "Backend: http://${{ secrets.EC2_HOST }}:5001/api/health"
        else
          echo "Deployment failed - Backend: $BACKEND_STATUS, Frontend: $FRONTEND_STATUS"
          exit 1
        fi
    
    - name: Show Status
      if: always()
      run: |
        echo "=== DEPLOYMENT STATUS ==="
        echo "Time: $(date)"
        echo "Frontend: http://${{ secrets.EC2_HOST }}"
        echo "Backend: http://${{ secrets.EC2_HOST }}:5001/api/health"
        pm2 list
        echo "========================="